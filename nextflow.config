/*
 * -------------------------------------------------
 *  nf-core/atacseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Options: Generic
  input = './design.csv'
  single_end = false
  seq_center = null
  fragment_size = 0
  fingerprint_bins = 500000

  // Options: References
  genome = false
  tss_bed = false
  save_reference = false

  // Options: Trimming
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  trim_nextseq = 0
  skip_trimming = false
  save_trimmed = false

  // Options: Alignments
  bwa_min_score = false
  keep_mito = false
  keep_dups = false
  keep_multi_map = false
  skip_merge_replicates = false
  save_align_intermeds = false

  // Options: Peaks
  narrow_peak = false
  broad_cutoff = 0.1
  macs_fdr = false
  macs_pvalue = false
  min_reps_consensus = 1
  save_macs_pileup = false
  skip_peak_qc = false
  skip_peak_annotation = false
  skip_consensus_peaks = false

  // Options: Differential analysis
  deseq2_vst = false
  skip_diff_analysis = false

  // Options: QC
  skip_fastqc = false
  skip_picard_metrics = false
  skip_preseq = false
  skip_plot_profile = false
  skip_plot_fingerprint = false
  skip_ataqv = false
  skip_igv = false
  skip_multiqc = false

  // Options: Config
  multiqc_config = false
  bamtools_filter_pe_config = "$baseDir/assets/bamtools_filter_pe.json"
  bamtools_filter_se_config = "$baseDir/assets/bamtools_filter_se.json"

  // Options: Custom config
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Options: Other
  help = false
  outdir = './results'
  publish_dir_mode = 'copy'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  igenomes_ignore = false
  max_multiqc_email_size = 25.MB
  tracedir = "${params.outdir}/pipeline_info"
  email = false
  email_on_fail = false
  plaintext_email = false
  monochrome_logs = false
  name = false
  hostnames = false
  enable_conda               = false

  // MultiQC options
  multiqc_config             = null
  multiqc_title              = null
  max_multiqc_email_size     = '25.MB'

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/atacseq:1.2.1'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/atacseq'
  author = 'Harshil Patel'
  homePage = 'https://github.com/nf-core/atacseq'
  description = 'ATACSeq peak-calling and differential analysis pipeline.'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.2.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
