/*
 * -------------------------------------------------
 *  nf-core/atacseq Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
  maxRetries = 2
  maxErrors = '-1'

  // Process-specific resource requirements
  withName:makeBWAindex {
    cpus = { check_max( 12, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:fastqc {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
  }
  withName:trim_galore {
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:bwa_aln_read1 {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:bwa_aln_read2 {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:bwa_sai_to_sam {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 36.h * task.attempt, 'time' ) }
  }
  withName:bwa_bam {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:markdup {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:markdup_collectmetrics {
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:filter_bam {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:rm_orphan {
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:merge_replicate {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:replicate_name_bam {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:replicate_bigwig {
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:replicate_tss_plot {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:replicate_macs {
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:replicate_ataqv {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:replicate_ataqv_mkarv {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:replicate_macs_consensus_deseq {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:merge_sample {
    cpus = { check_max (6, 'cpus')}
    memory = { check_max( 48.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:sample_bigwig {
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:sample_tss_plot {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:sample_macs {
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:sample_macs_consensus_deseq {
    cpus = { check_max (12, 'cpus')}
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:get_software_versions {
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    errorStrategy = 'ignore'
  }
  withName:multiqc {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    errorStrategy = 'ignore'
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 112.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}
